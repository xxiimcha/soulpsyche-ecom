generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at      DateTime          @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?         @db.Timestamptz(6)
  username        String            @unique
  email           String            @unique
  clerk_user_id   String            @unique(map: "User_user_id_key")
  address         String?           @default("")
  Address         Address[]
  Bag             Bag[]
  Order           Order[]
  ShippingAddress ShippingAddress[]
  Wishlist        Wishlist[]
}

model Product {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at          DateTime              @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?             @updatedAt @db.Timestamptz(6)
  name                String
  slug                String                @unique
  price               Float                 @db.Real
  sku                 String?               @unique
  category_id         String                @db.Uuid
  description         String?
  isFeatured          Boolean               @default(false)
  deleted_at          DateTime?             @db.Timestamptz(6)
  image_url           String?
  status              String                @default("Active")
  Bag                 Bag[]
  OrderItem           OrderItem[]
  Category            Category              @relation(fields: [category_id], references: [id], onDelete: Cascade)
  ProductVariantColor ProductVariantColor[]
  Wishlist            Wishlist[]            @relation("Product_Wishlist")
}

model Category {
  id                     String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at             DateTime  @default(now()) @db.Timestamptz(6)
  updated_at             DateTime? @db.Timestamptz(6)
  name                   String    @unique
  slug                   String    @unique
  variant_color_required Boolean   @default(false)
  variant_size_required  Boolean   @default(false)
  Product                Product[]
}

model ProductVariantColor {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at         DateTime             @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?            @db.Timestamptz(6)
  color              String
  images             String[]
  product_id         String               @db.Uuid
  Bag                Bag[]                @relation("BagToProductVariantColor")
  Product            Product              @relation(fields: [product_id], references: [id], onDelete: Cascade)
  ProductVariantSize ProductVariantSize[]
}

model ProductVariantSize {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at          DateTime            @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?           @db.Timestamptz(6)
  size                PRODUCT_SIZES
  stock               Int
  status              PRODUCT_STATUS
  variant_color_id    String              @db.Uuid
  OrderItem           OrderItem[]
  ProductVariantColor ProductVariantColor @relation(fields: [variant_color_id], references: [id], onDelete: Cascade)
  Wishlist            Wishlist[]          @relation("Wishlist_product_variant_size_idToProductVariantSize")
}

model Wishlist {
  id                      String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at              DateTime           @default(now()) @db.Timestamptz(6)
  updated_at              DateTime?          @db.Timestamptz(6)
  user_id                 String             @db.Uuid
  product_variant_size_id String             @db.Uuid
  product_id              String             @db.Uuid
  Product                 Product            @relation("Product_Wishlist", fields: [product_id], references: [id], onDelete: Cascade)
  ProductVariantSize      ProductVariantSize @relation("Wishlist_product_variant_size_idToProductVariantSize", fields: [product_variant_size_id], references: [id], onDelete: Cascade)
  User                    User               @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Address {
  id                 String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at         DateTime          @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?         @db.Timestamptz(6)
  house_number       String
  address            String
  barangay           String
  municipality       String
  province           String
  zip_code           String
  complete_address   String
  additional_address String?
  user_id            String            @db.Uuid
  User               User              @relation(fields: [user_id], references: [id], onDelete: Cascade)
  ShippingAddress    ShippingAddress[]
}

model Bag {
  id                       String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at               DateTime            @default(now()) @db.Timestamptz(6)
  updated_at               DateTime?           @db.Timestamptz(6)
  quantity                 Int
  user_id                  String              @db.Uuid
  product_id               String              @db.Uuid
  product_variant_size_id  String              @db.Uuid
  product_variant_color_id String              @db.Uuid
  Product                  Product             @relation(fields: [product_id], references: [id], onDelete: Cascade)
  ProductVariantColor      ProductVariantColor @relation("BagToProductVariantColor", fields: [product_variant_color_id], references: [id], onDelete: Cascade)
  User                     User                @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Order {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at      DateTime        @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?       @db.Timestamptz(6)
  user_id         String          @db.Uuid
  order_status    ORDER_STATUS
  total_amount    Float           @db.Real
  payment_status  PAYMENT_STATUS
  courier_name    String?
  tracking_number String?
  User            User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  OrderItem       OrderItem[]
  PaymentDetail   PaymentDetail[]
}

model OrderItem {
  id                      String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at              DateTime           @default(now()) @db.Timestamptz(6)
  updated_at              DateTime?          @db.Timestamptz(6)
  order_id                String             @db.Uuid
  product_id              String             @db.Uuid
  product_variant_size_id String             @db.Uuid
  quantity                Int
  price                   Float              @db.Real
  subtotal                Float              @db.Real
  Order                   Order              @relation(fields: [order_id], references: [id], onDelete: Cascade)
  Product                 Product            @relation(fields: [product_id], references: [id], onDelete: Cascade)
  ProductVariantSize      ProductVariantSize @relation(fields: [product_variant_size_id], references: [id], onDelete: Cascade)
}

model PaymentDetail {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at     DateTime  @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @db.Timestamptz(6)
  order_id       String    @db.Uuid
  transaction_id String
  amount_paid    Float     @db.Real
  payment_status String
  payment_method String
  Order          Order     @relation(fields: [order_id], references: [id], onDelete: Cascade)
}

model PaymentMethodInfo {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at     DateTime  @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @db.Timestamptz(6)
  description    String?
  account_name   String?
  account_number String?
  qr_code        String?
  is_active      Boolean   @default(true)
  method_name    String
}

model ShippingAddress {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at     DateTime  @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @db.Timestamptz(6)
  address_id     String    @db.Uuid
  user_id        String    @db.Uuid
  full_name      String?
  email_address  String?
  contact_number String
  is_default     Boolean
  Address        Address   @relation(fields: [address_id], references: [id], onDelete: Cascade)
  User           User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum ORDER_STATUS {
  pending
  processing
  completed
  canceled
  shipped
}

enum PAYMENT_STATUS {
  paid
  unpaid
  failed
}

enum PRODUCT_SIZES {
  XS
  S
  M
  L
  XL
  XXL
}

enum PRODUCT_STATUS {
  Active
  Inactive
  Out_of_Stock @map("Out of Stock")
  Discontinued
  Pending
  Draft
  Archived
}
